plugins {
    id 'org.sonarqube' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.4.RELEASE' apply false
    id 'com.github.hierynomus.license' version "0.14.0"
}

sonarqube {
    properties {
        property 'sonar.projectName', projectTitle
    }
}

allprojects {
    apply plugin: 'maven-publish'

    ext {
        release = project.hasProperty('release') && project.getProperty('release')
        buildNumber = System.getProperty("buildNumber")
    }
    // Replaces the version defined in sources, usually x.y-SNAPSHOT, by a version identifying the build.
    if (version.endsWith('-SNAPSHOT') && ext.buildNumber != null) {
        def versionSuffix = (version.toString().count('.') == 1 ? ".0.${ext.buildNumber}" : ".${ext.buildNumber}")
        version = version.replace('-SNAPSHOT', versionSuffix)
    }

    repositories {
        maven {
            url "https://repox.sonarsource.com/sonarsource"
        }
    }
}

subprojects {
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'io.spring.dependency-management'
    dependencyManagement {
        dependencies {
            dependency 'com.google.code.findbugs:jsr305:3.0.2'
            dependencySet(group: 'org.junit.jupiter', version: '5.2.0') {
                entry 'junit-jupiter-api'
                entry 'junit-jupiter-engine'
                entry 'junit-jupiter-params'
            }
            dependency 'org.assertj:assertj-core:3.9.0'
            dependency('org.mockito:mockito-core:2.15.0') {
                exclude 'org.hamcrest:hamcrest-core'
            }
            dependencySet(group: 'org.sonarsource.analyzer-commons', version: '1.7.0.243') {
                entry 'sonar-analyzer-commons'
                //entry 'sonar-analyzer-test-commons'
            }
            dependency 'org.sonarsource.sonarqube:sonar-plugin-api:7.2-RC1'
            dependency 'org.sonarsource.orchestrator:sonar-orchestrator:3.19.0.1641'
        }
    }

    license {
        header = rootProject.file('LICENSE')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
        excludes(["**/*.md", "**/*.gradle", "**/*.json", "**/*.xml"])
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                if (release) {
                    pom.withXml {
                        asNode().appendNode('name', projectTitle)
                        asNode().appendNode('description', description)
                        asNode().appendNode('url', 'http://janosgyerik.com/')
                        
                        def organization = asNode().appendNode('organization')
                        organization.appendNode('name', 'SonarMarkdown')
                        organization.appendNode('url', 'http://janosgyerik.com')

                        def licenses = asNode().appendNode('licenses')
                        def license = licenses.appendNode('license')
                        license.appendNode('name', 'MIT')
                        license.appendNode('url', 'https://opensource.org/licenses/MIT')
                        license.appendNode('distribution', 'repo')

                        def scm = asNode().appendNode('scm')
                        scm.appendNode('url', 'https://github.com/janosgyerik/sonar-markdown')

                        def developers = asNode().appendNode('developers')
                        def developer = developers.appendNode('developer')
                        developer.appendNode('id', 'janosgyerik')
                        developer.appendNode('name', 'Janos Gyerik')
                    }
                }
            }
        }
    }
}
